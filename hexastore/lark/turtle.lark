//[1] turtleDoc   ::= statement*
turtle_document: statement*
//[2] statement   ::= directive | triples '.'
statement: directive | triples "."
//[3] directive   ::= prefixID | base | sparqlPrefix | sparqlBase
directive: prefix_id | base | sparql_prefix | sparql_base
//[4] prefixID    ::= '@prefix' PNAME_NS IRIREF '.'
prefix_id: "@prefix" PNAME_NS iriref "."
//[5] base    ::= '@base' IRIREF '.'
base: "@base" iriref "."
//[5s]    sparqlBase  ::= "BASE" IRIREF
sparql_base: "BASE"i iriref
//[6s]    sparqlPrefix    ::= "PREFIX" PNAME_NS IRIREF
sparql_prefix: "PREFIX"i PNAME_NS iriref
//[6] triples ::= subject predicateObjectList | blankNodePropertyList predicateObjectList?
triples: subject predicate_object_list -> triples_1
    | blank_node_property_list predicate_object_list? -> triples_2
//[7] predicateObjectList ::= verb objectList (';' (verb objectList)?)*
predicate_object_list: verb object_list (";" (verb object_list)?)*
//[8] objectList  ::= object (',' object)*
object_list: object ("," object)*
//[9] verb    ::= predicate | 'a'
verb: _predicate
    | "a" -> a
//[10]    subject ::= iri | BlankNode | collection
subject: _iri | blank_node | collection | triple_x
//[11]    predicate   ::= iri
_predicate: _iri
//[12]    object  ::= iri | BlankNode | collection | blankNodePropertyList | literal
object: _iri | blank_node | collection | blank_node_property_list | literal | triple_x
//[13]    literal ::= RDFLiteral | NumericLiteral | BooleanLiteral
literal: rdf_literal | numeric_literal | boolean_literal
//[14]    blankNodePropertyList   ::= '[' predicateObjectList ']'
blank_node_property_list: "[" predicate_object_list "]"
//[15]    collection  ::= '(' object* ')'
collection: "(" object* ")"
//[16]    NumericLiteral  ::= INTEGER | DECIMAL | DOUBLE
numeric_literal: INTEGER | DECIMAL | DOUBLE
//[128s]  RDFLiteral  ::= String (LANGTAG | '^^' iri)?
rdf_literal: string -> rdf_literal_1
    | string LANGTAG -> rdf_literal_2
    | string "^^" _iri -> rdf_literal_3
//[133s]  BooleanLiteral  ::= 'true' | 'false'
boolean_literal: "true" -> true
    | "false" -> false
//[17]    String  ::= STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
string: STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
//[135s]  iri ::= IRIREF | PrefixedName
_iri: iriref | _prefixed_name
//[136s]  PrefixedName    ::= PNAME_LN | PNAME_NS
_prefixed_name: pname_ln | PNAME_NS
//[137s]  BlankNode   ::= BLANK_NODE_LABEL | ANON
blank_node: BLANK_NODE_LABEL
    | ANON -> anonymous_blank_node

triple_x: "<<" subject_x _predicate object_x ">>"
subject_x: _iri | blank_node | triple_x
object_x: _iri | blank_node | literal | triple_x

//[18]    IRIREF  ::= '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
iriref: "<" IRICHAR? ">"
IRICHAR: (/[^\x00-\x20<>"{}|^`\\]/ | UCHAR)+
//[139s]  PNAME_NS    ::= PN_PREFIX? ':'
PNAME_NS: PN_PREFIX? ":"
//[140s]  PNAME_LN    ::= PNAME_NS PN_LOCAL
pname_ln: PNAME_NS PN_LOCAL
//[141s]  BLANK_NODE_LABEL    ::= '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
BLANK_NODE_LABEL: "_:" (PN_CHARS_U | /[0-9]/) ((PN_CHARS | ".")* PN_CHARS)?
//[144s]  LANGTAG ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
LANGTAG: "@" /[a-zA-Z]+/ ("-" /[a-zA-Z0-9]+/)*
//[19]    INTEGER ::= [+-]? [0-9]+
INTEGER: /[+-]?/ /[0-9]+/
//[20]    DECIMAL ::= [+-]? [0-9]* '.' [0-9]+
DECIMAL: /[+-]?/ /[0-9]*/ "." /[0-9]+/
//[21]    DOUBLE  ::= [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
DOUBLE: /[+-]?/ (/[0-9]+/ "." /[0-9]*/ EXPONENT | "." /[0-9]+/ EXPONENT | /[0-9]+/ EXPONENT)
//[154s]  EXPONENT    ::= [eE] [+-]? [0-9]+
EXPONENT: /[eE]/ /[+-]?/ /[0-9]+/
//[22]    STRING_LITERAL_QUOTE    ::= '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
STRING_LITERAL_QUOTE: "\"" (/[^\x22\\\x0A\x0D]/ | ECHAR | UCHAR)* "\""
//[23]    STRING_LITERAL_SINGLE_QUOTE ::= "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
STRING_LITERAL_SINGLE_QUOTE: "'" (/[^\x22\\\x0A\x0D]/ | ECHAR | UCHAR)* "'"
//[24]    STRING_LITERAL_LONG_SINGLE_QUOTE    ::= "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
STRING_LITERAL_LONG_SINGLE_QUOTE: "'''" (("'" | "''")? (/[^'\\]/ | ECHAR | UCHAR))* "'''"
//[25]    STRING_LITERAL_LONG_QUOTE   ::= '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
STRING_LITERAL_LONG_QUOTE: "\"\"\"" (("\"" | "\"\"")? (/[^"\\]/ | ECHAR | UCHAR))* "\"\"\""

//[26]    UCHAR   ::= '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
UCHAR: "\\u" HEX HEX HEX HEX | "\\U" HEX HEX HEX HEX HEX HEX HEX HEX
//[159s]  ECHAR   ::= '\' [tbnrf"'\]
ECHAR: "\\" /[tbnrf"'\\]/
//[161s]  WS  ::= #x20 | #x9 | #xD | #xA /* #x20=space #x9=character tabulation #xD=carriage return #xA=new line */
WS: /[ \t\f\r\n]/+
//[162s]  ANON    ::= '[' WS* ']'
ANON: "[" WS* "]"
//[163s]  PN_CHARS_BASE   ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
PN_CHARS_BASE: "A" .. "Z" | "a" .. "z" // /[A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]/
//[164s]  PN_CHARS_U  ::= PN_CHARS_BASE | '_'
PN_CHARS_U: PN_CHARS_BASE | "_"
//[166s]  PN_CHARS    ::= PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
PN_CHARS: PN_CHARS_U | "-" | "0" .. "9" // | /#x00B7/ | /[#x0300-#x036F]/ | /[#x203F-#x2040]/
//[167s]  PN_PREFIX   ::= PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
PN_PREFIX: PN_CHARS_BASE ((PN_CHARS | ".")* PN_CHARS)?
//[168s]  PN_LOCAL    ::= (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
PN_LOCAL: (PN_CHARS_U | ":" | "0" .. "9" | PLX) ((PN_CHARS | "." | ":" | PLX)* (PN_CHARS | ":" | PLX))?
//[169s]  PLX ::= PERCENT | PN_LOCAL_ESC
PLX: PERCENT | PN_LOCAL_ESC
//[170s]  PERCENT ::= '%' HEX HEX
PERCENT: "%" HEX HEX
//[171s]  HEX ::= [0-9] | [A-F] | [a-f]
HEX: "A" .. "F" | "a" .. "f" | "0" .. "9"
//[172s]  PN_LOCAL_ESC    ::= '\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')
PN_LOCAL_ESC: "\\" ("_" | "~" | "." | "-" | "!" | "$" | "&" | "\"" | "(" | ")" | "*" | "+" | "," | ";" | "=" | "/" | "?" | "#" | "@" | "%")

%ignore WS

COMMENT: "#" /[^\n]/*
%ignore COMMENT